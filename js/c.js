// Generated by CoffeeScript 1.7.1
(function() {
  var animateLoad, byteCount, checkMatchPassword, checkPasswordLive, delay, doEmailCheck, doTOTPSubmit, evalRequirements, isBlank, isBool, isEmpty, isJson, isNull, isNumber, mapNewWindows, passwords, root, roundNumber, stopLoad, stopLoadError, toFloat, toInt, toggleNewUserSubmit,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  isBool = function(str) {
    return str === true || str === false;
  };

  isEmpty = function(str) {
    return !str || str.length === 0;
  };

  isBlank = function(str) {
    return !str || /^\s*$/.test(str);
  };

  isNull = function(str) {
    try {
      if (isEmpty(str) || isBlank(str) || (str == null)) {
        if (!(str === false || str === 0)) {
          return true;
        }
      }
    } catch (_error) {

    }
    return false;
  };

  isJson = function(str) {
    if (typeof str === 'object') {
      return true;
    }
    try {
      JSON.parse(str);
      return true;
    } catch (_error) {

    }
    return false;
  };

  isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
  };

  toFloat = function(str) {
    if (!isNumber(str) || isNull(str)) {
      return 0;
    }
    return parseFloat(str);
  };

  toInt = function(str) {
    if (!isNumber(str) || isNull(str)) {
      return 0;
    }
    return parseInt(str);
  };

  function toObject(arr) {
    var rv = {};
    for (var i = 0; i < arr.length; ++i)
        if (arr[i] !== undefined) rv[i] = arr[i];
    return rv;
};

  String.prototype.toBool = function() {
    return this.toString() === 'true';
  };

  Boolean.prototype.toBool = function() {
    return this.toString() === 'true';
  };

  Object.size = function(obj) {
    var key, size;
    size = 0;
    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        size++;
      }
    }
    return size;
  };

  delay = function(ms, f) {
    return setTimeout(f, ms);
  };

  roundNumber = function(number, digits) {
    var multiple;
    if (digits == null) {
      digits = 0;
    }
    multiple = Math.pow(10, digits);
    return Math.round(number * multiple) / multiple;
  };

  jQuery.fn.exists = function() {
    return jQuery(this).length > 0;
  };

  jQuery.fn.isVisible = function() {
    return jQuery(this).css("display") !== "none";
  };

  jQuery.fn.hasChildren = function() {
    return Object.size(jQuery(this).children()) > 3;
  };

  byteCount = (function(_this) {
    return function(s) {
      return encodeURI(s).split(/%..|./).length - 1;
    };
  })(this);

  function shuffle(o) { //v1.0
    for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
    return o;
};

  window.debounce_timer = null;

  ({
    debounce: function(func, threshold, execAsap) {
      if (threshold == null) {
        threshold = 300;
      }
      if (execAsap == null) {
        execAsap = false;
      }
      return function() {
        var args, delayed, obj;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        obj = this;
        delayed = function() {
          if (!execAsap) {
            return func.apply(obj, args);
          }
        };
        if (window.debounce_timer != null) {
          clearTimeout(window.debounce_timer);
        } else if (execAsap) {
          func.apply(obj, args);
        }
        return window.debounce_timer = setTimeout(delayed, threshold);
      };
    }
  });

  Function.prototype.debounce = function() {
    var args, delayed, e, execAsap, func, threshold, timeout;
    threshold = arguments[0], execAsap = arguments[1], timeout = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    if (threshold == null) {
      threshold = 300;
    }
    if (execAsap == null) {
      execAsap = false;
    }
    if (timeout == null) {
      timeout = window.debounce_timer;
    }
    func = this;
    delayed = function() {
      if (!execAsap) {
        func.apply(func, args);
      }
      return console.log("Debounce applied");
    };
    if (timeout != null) {
      try {
        clearTimeout(timeout);
      } catch (_error) {
        e = _error;
      }
    } else if (execAsap) {
      func.apply(obj, args);
      console.log("Executed immediately");
    }
    return window.debounce_timer = setTimeout(delayed, threshold);
  };

  mapNewWindows = function() {
    return $(".newwindow").each(function() {
      var curHref, openInNewWindow;
      curHref = $(this).attr("href");
      openInNewWindow = function(url) {
        if (url == null) {
          return false;
        }
        window.open(url);
        return false;
      };
      $(this).click(function() {
        return openInNewWindow(curHref);
      });
      return $(this).keypress(function() {
        return openInNewWindow(curHref);
      });
    });
  };

  animateLoad = function(d, elId) {
    var big, e, offset, offset2, sm_d, small;
    if (d == null) {
      d = 50;
    }
    if (elId == null) {
      elId = "#status-container";
    }
    try {
      if ($(elId).exists()) {
        sm_d = roundNumber(d * .5);
        big = $(elId).find('.ball');
        small = $(elId).find('.ball1');
        big.removeClass('stop hide');
        big.css({
          width: "" + d + "px",
          height: "" + d + "px"
        });
        offset = roundNumber(d / 2 + sm_d / 2 + 9);
        offset2 = roundNumber((d + 10) / 2 - (sm_d + 6) / 2);
        small.removeClass('stop hide');
        small.css({
          width: "" + sm_d + "px",
          height: "" + sm_d + "px",
          top: "-" + offset + "px",
          'margin-left': "" + offset2 + "px"
        });
        return true;
      }
      return false;
    } catch (_error) {
      e = _error;
      return console.log('Could not animate loader', e.message);
    }
  };

  stopLoad = function(elId) {
    var big, e, small;
    if (elId == null) {
      elId = "#status-container";
    }
    try {
      if ($(elId).exists()) {
        big = $(elId).find('.ball');
        small = $(elId).find('.ball1');
        big.addClass('bballgood ballgood');
        small.addClass('bballgood ball1good');
        return delay(250, function() {
          big.addClass('stop hide');
          big.removeClass('bballgood ballgood');
          small.addClass('stop hide');
          return small.removeClass('bballgood ballgood');
        });
      }
    } catch (_error) {
      e = _error;
      return console.log('Could not stop load animation', e.message);
    }
  };

  stopLoadError = function(elId) {
    var big, e, small;
    if (elId == null) {
      elId = "#status-container";
    }
    try {
      if ($(elId).exists()) {
        big = $(elId).find('.ball');
        small = $(elId).find('.ball1');
        big.addClass('bballerror ballerror');
        small.addClass('bballerror ball1error');
        return delay(1500, function() {
          big.addClass('stop hide');
          big.removeClass('bballerror ballerror');
          small.addClass('stop hide');
          return small.removeClass('bballerror ballerror');
        });
      }
    } catch (_error) {
      e = _error;
      return console.log('Could not stop load error animation', e.message);
    }
  };

  $(function() {
    var e;
    try {
      window.picturefill();
    } catch (_error) {
      e = _error;
      console.log("Could not execute picturefill.");
    }
    return mapNewWindows();
  });

  passwords = new Object();

  passwords.goodbg = "#cae682";

  passwords.badbg = "#e5786d";

  if (passwords.minLength == null) {
    passwords.minLength = 8;
  }

  if (passwords.overrideLength == null) {
    passwords.overrideLength = 21;
  }

  checkPasswordLive = function() {
    var pass;
    pass = $("#password").val();
    if (pass.length > passwords.overrideLength || pass.match(/^(?:(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$)$/)) {
      $("#password").css("background", passwords.goodbg);
      passwords.basepwgood = true;
    } else {
      $("#password").css("background", passwords.badbg);
      passwords.basepwgood = false;
    }
    evalRequirements();
    if (!isNull($("#password2").val())) {
      checkMatchPassword();
    }
    toggleNewUserSubmit();
    return false;
  };

  checkMatchPassword = function() {
    if ($("#password").val() === $("#password2").val()) {
      $('#password2').css('background', passwords.goodbg);
      passwords.passmatch = true;
    } else {
      $('#password2').css('background', passwords.badbg);
      passwords.passmatch = false;
    }
    toggleNewUserSubmit();
    return false;
  };

  toggleNewUserSubmit = function() {
    var dbool, e;
    try {
      dbool = !(passwords.passmatch && passwords.basepwgood);
      return $("#createUser_submit").attr("disabled", dbool);
    } catch (_error) {
      e = _error;
      passwords.passmatch = false;
      return passwords.basepwgood = false;
    }
  };

  evalRequirements = function() {
    var html, pass, pstrength;
    if (!$("#strength-meter").exists()) {
      html = "<div id='strength-meter'><div id='strength-requirements'><div id='strength-alpha'><p class='label'>a</p><div class='strength-eval'></div></div><div id='strength-alphacap'><p class='label'>A</p><div class='strength-eval'></div></div><div id='strength-numspecial'><p class='label'>1/!</p><div class='strength-eval'></div></div></div><div id='strength-bar'><label for='password-strength'>Strength: </label><progress id='password-strength' max='5'></progress></div></div>";
      $("#login .right").prepend(html);
    }
    pass = $("#password").val();
    pstrength = zxcvbn(pass);
    $(".strength-eval").css("background", passwords.badbg);
    if (pass.length > 20) {
      $(".strength-eval").css("background", passwords.goodbg);
    } else {
      if (pass.match(/^(?:((?=.*\d)|(?=.*\W+)).*$)$/)) {
        $("#strength-numspecial .strength-eval").css("background", passwords.goodbg);
      }
      if (pass.match(/^(?=.*[a-z]).*$/)) {
        $("#strength-alpha .strength-eval").css("background", passwords.goodbg);
      }
      if (pass.match(/^(?=.*[A-Z]).*$/)) {
        $("#strength-alphacap .strength-eval").css("background", passwords.goodbg);
      }
    }
    return $("#password-strength").attr("value", pstrength.score + 1);
  };

  doEmailCheck = function() {};

  doTOTPSubmit = function() {
    var ajaxLanding, args, code, totp, url, urlString, user;
    event.preventDefault();
    animateLoad();
    code = $("#totp_code").val();
    user = $("#username").val();
    url = $.url();
    ajaxLanding = "async_login_handler.php";
    urlString = url.attr('protocol') + '://' + url.attr('host') + '/' + ajaxLanding;
    args = "action=verifytotp&code=" + code + "&user=" + user;
    totp = $.post(urlString + ajaxLanding, args, 'json');
    totp.done(function(result) {
      var expires, i;
      if (result.status === true) {
        $("#totp_message").text("Correct!").removeClass("error").addClass("good");
        expires = result.expires;
        i = 0;
        return $.each(result.raw_cookie(function(key, val) {
          var home;
          $.cookie(key, val, expires);
          i++;
          if (i === Object.size(result.raw_cookie)) {
            home = url.attr('protocol') + '://' + url.attr('host') + '/';
            stopLoad();
            return window.location(home);
          }
        }));
      } else {
        $("#totp_message").text(result.human_error);
        $("#totp_code").val("");
        $("#totp_code").focus();
        return stopLoadError();
      }
    });
    return totp.fail(function(result, status) {
      return stopLoadError();
    });
  };

  $(function() {
    $("#password").keypress(function() {
      return checkPasswordLive();
    }).change(function() {
      return checkPasswordLive();
    }).keyup(function() {
      return checkPasswordLive();
    });
    return $("#password2").keypress(function() {
      return checkMatchPassword();
    }).change(function() {
      return checkMatchPassword();
    }).keyup(function() {
      return checkMatchPassword();
    });
  });

}).call(this);
